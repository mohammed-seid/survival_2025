---
title: "CommCare Monitoring Dashboard"
format:
  dashboard:
    orientation: rows
    nav-mode: a
    theme: cosmo
    css: styles.css
logo: image/OAF.png
execute:
  echo: false
  cache: true
---

```{r setup, include=FALSE}
# --- Libraries ---
library(httr)
library(jsonlite)
library(tidyverse)
library(lubridate)
library(plotly)
library(reactable)
library(htmltools)

# --- Helper Functions ---
format_number <- function(x) {
  format(x, big.mark = ",", scientific = FALSE)
}

format_percent <- function(x) {
  paste0(round(x * 100, 1), "%")
}

# --- CommCare API Configuration ---
# It's recommended to use environment variables for credentials
USERNAME <- Sys.getenv("COMMCARE_USERNAME", "mohammed.seidhussen@oneacrefund.org")
API_KEY <- Sys.getenv("COMMCARE_API_KEY", "a749d18804539c5a2210817cda29630391a088bd")
PROJECT_SPACE <- "oaf-ethiopia"
FORM_ID <- "e24ab639e5b7d1b609cf2894f7057b75"

# --- Data Caching ---
cache_file <- "commcare_data.rds"
if (file.exists(cache_file) && (file.info(cache_file)$mtime > (Sys.time() - 3600))) {
  df_raw <- readRDS(cache_file)
  cat("Loaded data from cache.\n")
} else {
  url <- paste0("https://www.commcarehq.org/a/", PROJECT_SPACE, "/api/v0.5/odata/forms/", FORM_ID, "/feed")
  
  limit <- 2000
  offset <- 0
  all_records <- list()
  
  cat("Fetching data from CommCare API...\n")
  
  while (TRUE) {
    response <- GET(
      url,
      query = list(limit = limit, offset = offset),
      authenticate(USERNAME, API_KEY, type = "basic"),
      timeout(100)
    )
    
    if (status_code(response) != 200) {
      stop("API request failed with status: ", status_code(response))
    }
    
    data <- fromJSON(content(response, "text"), flatten = TRUE)
    records <- data$value
    
    if (length(records) == 0) break
    
    all_records <- c(all_records, records)
    if (length(records) < limit) break
    
    offset <- offset + limit
    cat(paste0("Fetched ", length(all_records), " records...\n"))
  }
  
  df_raw <- bind_rows(all_records)
  saveRDS(df_raw, cache_file)
  cat("Data fetched and cached successfully.\n")
}

# --- Data Processing ---
df_processed <- df_raw %>%
  select(-any_of(c("farmer_name", "name", "phone_no", "tno"))) %>%
  mutate(across(everything(), ~ na_if(., "---"))) %>%
  mutate(across(where(is.list), ~ sapply(., function(x) if(length(x) > 0) x[[1]] else NA))) %>%
  mutate(
    completed_time = ymd_hms(completed_time),
    started_time = ymd_hms(started_time),
    date = as.Date(completed_time),
    week = floor_date(date, "week"),
    month = floor_date(date, "month"),
    hour_started = hour(started_time),
    day_of_week = wday(date, label = TRUE, week_start = 1),
    is_weekend = day_of_week %in% c("Sat", "Sun"),
    duration_minutes = as.numeric(difftime(completed_time, started_time, units = "mins")),
    is_night_survey = hour_started >= 19 | hour_started < 6,
    is_short_survey = duration_minutes <= 5,
    is_long_survey = duration_minutes >= 120
  ) %>%
  mutate(across(starts_with("ps_num_planted_") | starts_with("num_surv_"), as.numeric, .names = "{.col}"))

df_completed <- df_processed %>% filter(consent == 1)

# --- Color Palette ---
custom_colors <- list(
  primary = "#2c3e50",
  secondary = "#3498db",
  success = "#2ecc71",
  warning = "#f39c12",
  danger = "#e74c3c",
  light_gray = "#ecf0f1",
  gradient = RColorBrewer::brewer.pal(9, "BuGn")
)
```

# {.tabset}

## Enumerator Performance

### Row 1 {height=30%}

::: {.card title="Enumerator Leaderboard"}
```{r enumerator_table}
enumerator_stats <- df_completed %>%
  group_by(username) %>%
  summarise(
    total_surveys = n(),
    avg_duration = mean(duration_minutes, na.rm = TRUE),
    short_surveys = sum(is_short_survey, na.rm = TRUE),
    night_surveys = sum(is_night_survey, na.rm = TRUE),
    weekend_surveys = sum(is_weekend, na.rm = TRUE),
    completion_rate = n() / nrow(df_completed),
    .groups = "drop"
  ) %>%
  arrange(desc(total_surveys))

reactable(
  enumerator_stats,
  columns = list(
    username = colDef(name = "Enumerator", minWidth = 120, style = list(fontWeight = "bold")),
    total_surveys = colDef(name = "Total Surveys", align = "center"),
    avg_duration = colDef(name = "Avg Duration (min)", align = "center", format = colFormat(digits = 1)),
    short_surveys = colDef(name = "Short (<5m)", align = "center"),
    night_surveys = colDef(name = "Night", align = "center"),
    weekend_surveys = colDef(name = "Weekend", align = "center"),
    completion_rate = colDef(name = "Share", align = "center", format = colFormat(percent = TRUE, digits = 1))
  ),
  defaultPageSize = 5, searchable = TRUE, highlight = TRUE, bordered = TRUE, striped = TRUE
)
```
:::

### Row 2 {height=70%}

::: {.card title="Daily Productivity Heatmap"}
```{r productivity_heatmap}
heatmap_data <- df_completed %>%
  group_by(day_of_week, hour_started) %>%
  summarise(count = n(), .groups = "drop")

plot_ly(
  data = heatmap_data,
  x = ~hour_started, y = ~day_of_week, z = ~count,
  type = "heatmap",
  colorscale = list(c(0, custom_colors$light_gray), c(1, custom_colors$primary)),
  hovertemplate = "Day: %{y}<br>Hour: %{x}<br>Surveys: %{z}<extra></extra>"
) %>%
layout(
  xaxis = list(title = "Hour of Day"),
  yaxis = list(title = "Day of Week", categoryorder = "array", categoryarray = c("Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun")),
  paper_bgcolor = "transparent", plot_bgcolor = "transparent"
)
```
:::

::: {.card title="Performance Distribution"}
```{r performance_distribution}
plot_ly(df_completed,
        x = ~username, y = ~duration_minutes, type = 'box',
        marker = list(color = custom_colors$secondary),
        hovertemplate = "Enumerator: %{x}<br>Duration: %{y} min<extra></extra>") %>%
  layout(
    xaxis = list(title = "", tickangle = -45),
    yaxis = list(title = "Duration (minutes)"),
    paper_bgcolor = "transparent", plot_bgcolor = "transparent",
    showlegend = FALSE, margin = list(b = 100)
  )
```
:::

## Species Analysis

### Row 1 {height=25%}
```{r species_data_prep}
species_data <- df_completed %>%
  select(starts_with("ps_num_planted_"), starts_with("num_surv_")) %>%
  pivot_longer(everything(), names_to = "key", values_to = "value") %>%
  mutate(
    type = ifelse(str_detect(key, "ps_num_planted"), "planted", "survived"),
    species = str_remove_all(key, "ps_num_planted_|num_surv_")
  ) %>%
  group_by(species, type) %>%
  summarise(total = sum(value, na.rm = TRUE), .groups = "drop") %>%
  pivot_wider(names_from = type, values_from = total, values_fill = 0) %>%
  mutate(
    survival_rate = ifelse(planted > 0, survived / planted, 0),
    loss_count = planted - survived
  ) %>%
  filter(planted > 0) %>%
  arrange(desc(survival_rate))
```

::: {.metric-card}
<div class="metric-label">Total Species</div>
<div class="metric-value">`r nrow(species_data)`</div>
:::

::: {.metric-card}
<div class="metric-label">Trees Planted</div>
<div class="metric-value">`r format_number(sum(species_data$planted))`</div>
:::

::: {.metric-card}
<div class="metric-label">Trees Survived</div>
<div class="metric-value">`r format_number(sum(species_data$survived))`</div>
:::

::: {.metric-card}
<div class="metric-label">Overall Survival</div>
<div class="metric-value">`r format_percent(sum(species_data$survived) / sum(species_data$planted))`</div>
:::

### Row 2 {height=75%}

::: {.card title="Tree Survival Rates by Species"}
```{r survival_rates_plot}
plot_ly(species_data,
        x = ~reorder(species, survival_rate), y = ~survival_rate, type = 'bar',
        marker = list(color = ~survival_rate, colorscale = "Greens", showscale = TRUE),
        hovertemplate = "Species: %{x}<br>Survival: %{y:.1%}<extra></extra>") %>%
  layout(
    xaxis = list(title = ""),
    yaxis = list(title = "Survival Rate", tickformat = ".0%"),
    paper_bgcolor = "transparent", plot_bgcolor = "transparent",
    margin = list(b = 120)
  )
```
:::

::: {.card title="Detailed Species Performance"}
```{r species_table}
reactable(
  species_data,
  columns = list(
    species = colDef(name = "Species", style = list(fontWeight = "bold")),
    planted = colDef(name = "Planted", format = colFormat(separators = TRUE)),
    survived = colDef(name = "Survived", format = colFormat(separators = TRUE)),
    loss_count = colDef(name = "Lost", format = colFormat(separators = TRUE)),
    survival_rate = colDef(name = "Survival Rate", format = colFormat(percent = TRUE, digits = 1))
  ),
  defaultPageSize = 10, searchable = TRUE, highlight = TRUE, bordered = TRUE, striped = TRUE
)
```
:::