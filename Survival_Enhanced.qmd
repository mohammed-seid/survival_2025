---
title: "🌱 ETH 2025 Survival Survey Dashboard"
format: 
  dashboard:
    embed-resources: true
    theme: [cosmo, custom]
    logo: "🌱"
execute:
  warning: false
  echo: false
---

```{css}
/* Enhanced CSS for better visibility and interactivity */
.value-box {
  border-radius: 15px;
  box-shadow: 0 4px 12px rgba(0,0,0,0.15);
  transition: all 0.3s ease;
  padding: 12px; /* further reduced */
  margin: 10px;
  min-height: 70px; /* further reduced */
  position: relative;
  overflow: visible; /* allow content to show */
  background: #f8f9fa; /* light background for visibility */
  border: 1px solid #e0e0e0; /* subtle border for debugging */
}

.value-box:hover {
  transform: translateY(-5px);
  box-shadow: 0 8px 25px rgba(0,0,0,0.2);
}

.value-box::before {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  height: 4px;
  background: linear-gradient(90deg, #667eea, #764ba2);
}

/* Fix value-box icon visibility */
.value-box .value-box-icon {
  font-size: 1.2rem !important; /* further reduced */
  line-height: 1 !important;
  margin-bottom: 6px !important;
  display: block !important;
  opacity: 0.9 !important;
  text-align: center !important;
}

.value-box .value-box-value {
  font-size: 1rem !important; /* further reduced */
  font-weight: bold !important;
  margin: 6px 0 !important;
  line-height: 1.2 !important;
}

.value-box .value-box-title {
  font-size: 0.9rem !important;
  opacity: 0.8 !important;
  margin-top: 5px !important;
}

.card {
  border-radius: 12px;
  box-shadow: 0 3px 10px rgba(0,0,0,0.1);
  margin-bottom: 20px;
  border: none;
  transition: all 0.3s ease;
}

.card:hover {
  box-shadow: 0 5px 20px rgba(0,0,0,0.15);
}

.nav-tabs .nav-link {
  border-radius: 12px 12px 0 0;
  margin-right: 8px;
  padding: 12px 20px;
  font-weight: 500;
  transition: all 0.3s ease;
}

.nav-tabs .nav-link.active {
  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
  color: white;
  border-color: transparent;
  transform: translateY(-2px);
}

.nav-tabs .nav-link:hover:not(.active) {
  background-color: #f8f9fa;
  border-color: #dee2e6;
}

.plotly {
  border-radius: 10px;
  box-shadow: 0 2px 8px rgba(0,0,0,0.1);
}

/* Enhanced color scheme */
:root {
  --primary-color: #2E8B57;
  --secondary-color: #20B2AA;
  --accent-color: #FFD700;
  --warning-color: #FF6B6B;
  --success-color: #4ECDC4;
  --info-color: #17a2b8;
  --light-bg: #f8f9fa;
  --gradient-primary: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
  --gradient-success: linear-gradient(135deg, #4ECDC4 0%, #2E8B57 100%);
  --gradient-warning: linear-gradient(135deg, #FFD700 0%, #FF6B6B 100%);
}

/* Interactive elements */
.interactive-card {
  cursor: pointer;
  transition: all 0.3s ease;
}

.interactive-card:hover {
  transform: scale(1.02);
}

/* Better spacing and typography */
.dashboard-section {
  margin-bottom: 30px;
}

.section-title {
  color: var(--primary-color);
  font-weight: 600;
  margin-bottom: 20px;
  padding-bottom: 10px;
  border-bottom: 2px solid var(--accent-color);
}

/* Responsive improvements */
@media (max-width: 768px) {
  .value-box,
  .valuebox {
    margin: 5px;
    padding: 8px; /* further reduced */
    min-height: 50px; /* further reduced */
  }
  
  .valuebox .valuebox-icon {
    font-size: 0.9rem !important; /* further reduced */
  }
  
  .valuebox .valuebox-value {
    font-size: 0.8rem !important; /* further reduced */
  }
}

/* Table enhancements */
.dataTables_wrapper {
  border-radius: 10px;
  overflow: hidden;
  box-shadow: 0 2px 8px rgba(0,0,0,0.1);
}

.table-striped tbody tr:nth-of-type(odd) {
  background-color: rgba(0,0,0,0.02);
}

/* Animation for loading states */
@keyframes pulse {
  0% { opacity: 1; }
  50% { opacity: 0.7; }
  100% { opacity: 1; }
}

.loading {
  animation: pulse 1.5s infinite;
}
```

```{r setup}
#| include: false
# Enhanced package loading with progress indication
packages <- c(
  "forcats", "janitor", "lubridate", "tidyverse",
  "targets", "googlesheets4", "readr", "httr", "jsonlite",
  "ggthemes", "plotly", "highcharter", "DT", "gt", "gtsummary",
  "outliers", "crosstalk", "leaflet", "viridis", "scales",
  "kableExtra", "reactable", "sparkline", "formattable", "htmltools"
)

# Load packages with error handling
for(pkg in packages) {
  if(!require(pkg, character.only = TRUE, quietly = TRUE)) {
    install.packages(pkg, quiet = TRUE)
    library(pkg, character.only = TRUE, quietly = TRUE)
  }
}

# Custom functions
source_if_exists <- function(file) {
  if(file.exists(file)) source(file)
}
source_if_exists("R/formatting.R")
```

```{r data_import}
#| include: false
# Configuration
USERNAME <- "mohammed.seidhussen@oneacrefund.org"
API_KEY <- "a749d18804539c5a2210817cda29630391a088bd"
PROJECT_SPACE <- "oaf-ethiopia"
FORM_ID <- "e24ab639e5b7d1b609cf2894f7057b75"

# API Endpoint
url <- paste0("https://www.commcarehq.org/a/", PROJECT_SPACE, "/api/v0.5/odata/forms/", FORM_ID, "/feed")

# Enhanced data fetching with progress tracking
limit <- 2000
offset <- 0
all_records <- list()

while (TRUE) {
  query <- list(limit = limit, offset = offset)
  
  response <- GET(url, query = query, authenticate(USERNAME, API_KEY, type = "basic"))
  
  if (status_code(response) != 200) {
    cat(paste0("Error: ", status_code(response), "\n"))
    break
  }
  
  data <- fromJSON(content(response, "text"))
  records <- data$value
  
  if (length(records) == 0) break
  
  all_records <- c(all_records, records)
  
  if (length(records) < limit) break
  
  offset <- offset + limit
  cat(paste0("📊 Fetched ", length(all_records), " records...\n"))
}

# Convert to data frame
df <- bind_rows(all_records)
```

```{r data_cleaning}
#| include: false
# Enhanced data cleaning and preprocessing
df <- df %>%
  mutate(across(everything(), ~ na_if(., "---"))) %>%
  # Convert list columns to character
  mutate(across(where(is.list), ~ sapply(., function(x) if(length(x) > 0) x[1] else NA))) %>%
  # Add date variables
  mutate(
    date = as.Date(completed_time),
    started_date = as.Date(started_time),
    week = floor_date(date, "week"),
    month = floor_date(date, "month"),
    hour_started = hour(started_time),
    day_of_week = wday(date, label = TRUE),
    is_weekend = day_of_week %in% c("Sat", "Sun")
  ) %>%
  # Add survey quality indicators
  mutate(
    duration_minutes = as.numeric(difftime(completed_time, started_time, units = "mins")),
    is_night_survey = hour_started >= 19 | hour_started < 6,
    is_short_survey = duration_minutes <= 5,
    is_long_survey = duration_minutes >= 120
  )

# Filter completed surveys
df_completed <- df %>% filter(consent == 1)

# Create summary statistics
survey_stats <- list(
  total_surveys = nrow(df),
  completed_surveys = nrow(df_completed),
  refusal_rate = round((sum(df$consent == 0, na.rm = TRUE) / nrow(df)) * 100, 1),
  avg_duration = round(mean(df_completed$duration_minutes, na.rm = TRUE), 1),
  unique_enumerators = length(unique(df_completed$username)),
  date_range = paste(min(df_completed$date, na.rm = TRUE), "to", max(df_completed$date, na.rm = TRUE))
)
```

# 📊 Overview

## Row {height="25%"}

::: {.value-box icon="📋" color="primary"}
**Total Surveys**
`r survey_stats$total_surveys`
:::

::: {.value-box icon="✅" color="success"}
**Completed**
`r survey_stats$completed_surveys`
:::

::: {.value-box icon="❌" color="warning"}
**Refusal Rate**
`r survey_stats$refusal_rate`%
:::

::: {.value-box icon="⏱️" color="info"}
**Avg Duration**
`r survey_stats$avg_duration` min
:::

::: {.value-box icon="👥" color="secondary"}
**Enumerators**
`r survey_stats$unique_enumerators`
:::

## Row {height="75%"}

### Column {width="60%"}

```{r daily_progress}
# Enhanced daily progress chart with trend analysis
daily_data <- df_completed %>%
  group_by(date) %>%
  summarise(
    surveys = n(),
    avg_duration = mean(duration_minutes, na.rm = TRUE),
    .groups = "drop"
  ) %>%
  arrange(date) %>%
  mutate(
    cumulative = cumsum(surveys),
    moving_avg = zoo::rollmean(surveys, k = 7, fill = NA, align = "right"),
    target_cumulative = row_number() * 20 * 5  # 20 enumerators * 5 surveys/day
  )

p1 <- plot_ly(daily_data) %>%
  add_bars(
    x = ~date, y = ~surveys,
    name = "Daily Surveys",
    marker = list(color = "#2E8B57", opacity = 0.7),
    hovertemplate = "<b>%{x}</b><br>Surveys: %{y}<br>Avg Duration: %{customdata:.1f} min<extra></extra>",
    customdata = ~avg_duration
  ) %>%
  add_lines(
    x = ~date, y = ~moving_avg,
    name = "7-Day Average",
    line = list(color = "#FF6B6B", width = 3),
    hovertemplate = "<b>%{x}</b><br>7-Day Avg: %{y:.1f}<extra></extra>"
  ) %>%
  layout(
    title = list(text = "📈 Daily Survey Progress with Trend", font = list(size = 16)),
    xaxis = list(title = "Date"),
    yaxis = list(title = "Number of Surveys"),
    hovermode = "x unified",
    plot_bgcolor = "rgba(0,0,0,0)",
    paper_bgcolor = "rgba(0,0,0,0)"
  )

p1
```

### Column {width="40%"}

```{r performance_gauge}
# Performance gauge chart
target_surveys <- 3600
current_surveys <- survey_stats$completed_surveys
completion_rate <- (current_surveys / target_surveys) * 100

gauge_plot <- plot_ly(
  type = "indicator",
  mode = "gauge+number+delta",
  value = completion_rate,
  domain = list(x = c(0, 1), y = c(0, 1)),
  title = list(text = "🎯 Target Achievement", font = list(size = 20)),
  delta = list(reference = 100, suffix = "%"),
  gauge = list(
    axis = list(range = list(NULL, 100)),
    bar = list(color = "#2E8B57"),
    steps = list(
      list(range = c(0, 50), color = "#FFE6E6"),
      list(range = c(50, 80), color = "#FFF4E6"),
      list(range = c(80, 100), color = "#E6F7E6")
    ),
    threshold = list(
      line = list(color = "red", width = 4),
      thickness = 0.75,
      value = 90
    )
  )
) %>%
  layout(
    margin = list(l = 20, r = 20, t = 40, b = 20),
    paper_bgcolor = "rgba(0,0,0,0)",
    font = list(color = "black", family = "Arial")
  )

gauge_plot
```


# 👥 Enumerator Performance

## Row

### Column {.tabset width="50%"}

#### 📊 Individual Performance

```{r enumerator_performance}
# Enhanced enumerator performance analysis
enumerator_stats <- df_completed %>%
  group_by(username) %>%
  summarise(
    total_surveys = n(),
    avg_daily = round(n() / n_distinct(date), 2),
    avg_duration = round(mean(duration_minutes, na.rm = TRUE), 1),
    short_surveys = sum(is_short_survey, na.rm = TRUE),
    night_surveys = sum(is_night_survey, na.rm = TRUE),
    quality_score = round(100 - (short_surveys/total_surveys * 50) - (night_surveys/total_surveys * 30), 1),
    .groups = "drop"
  ) %>%
  arrange(desc(total_surveys))

# Create interactive table with DT instead of reactable to avoid div() issues
enumerator_stats %>%
  mutate(
    performance_indicator = case_when(
      quality_score >= 80 ~ "🟢 Excellent",
      quality_score >= 60 ~ "🟡 Good", 
      TRUE ~ "🔴 Needs Improvement"
    ),
    quality_score = paste0(quality_score, "%")
  ) %>%
  select(
    Enumerator = username,
    Total = total_surveys,
    `Daily Avg` = avg_daily,
    `Avg Duration` = avg_duration,
    `Short (<5min)` = short_surveys,
    `Night Surveys` = night_surveys,
    `Quality Score` = quality_score,
    Status = performance_indicator
  ) %>%
  DT::datatable(
    options = list(
      pageLength = 10,
      scrollX = TRUE,
      dom = 'Bfrtip',
      buttons = c('copy', 'csv', 'excel'),
      columnDefs = list(
        list(className = 'dt-center', targets = c(1, 2, 3, 4, 5, 6, 7))
      )
    ),
    class = "table table-striped table-hover",
    caption = "📊 Enumerator Performance Analysis"
  ) %>%
  DT::formatRound(columns = "Daily Avg", digits = 1) %>%
  DT::formatRound(columns = "Avg Duration", digits = 1) %>%
  DT::formatStyle(
    "Total",
    backgroundColor = DT::styleInterval(
      cuts = c(30, 50),
      values = c("#FFE6E6", "#FFF4E6", "#E6F7E6")
    )
  ) %>%
  DT::formatStyle(
    "Quality Score",
    backgroundColor = DT::styleEqual(
      c("🟢 Excellent", "🟡 Good", "🔴 Needs Improvement"),
      c("#E6F7E6", "#FFF4E6", "#FFE6E6")
    )
  )
```

#### 📈 Productivity

```{r productivity_trends}
# Daily productivity by enumerator
daily_productivity <- df_completed %>%
  group_by(username, date) %>%
  summarise(daily_count = n(), .groups = "drop")

# Create heatmap
productivity_heatmap <- daily_productivity %>%
  plot_ly(
    x = ~date, y = ~username, z = ~daily_count,
    type = "heatmap",
    colorscale = list(
      c(0, "#FFE6E6"), c(0.5, "#FFD700"), c(1, "#2E8B57")
    ),
    hovertemplate = "<b>%{y}</b><br>Date: %{x}<br>Surveys: %{z}<extra></extra>"
  ) %>%
  layout(
    title = "📅 Daily Productivity Heatmap",
    xaxis = list(title = "Date"),
    yaxis = list(title = "Enumerator"),
    margin = list(l = 100)
  )

productivity_heatmap
```

### Column {.tabset width="50%"}

#### 🎯 Target vs Actual

```{r target_comparison}
# Target vs actual comparison
target_data <- enumerator_stats %>%
  mutate(
    target = 5,  # Daily target
    performance_pct = (avg_daily / target) * 100,
    status = case_when(
      performance_pct >= 100 ~ "Above Target",
      performance_pct >= 80 ~ "Near Target",
      TRUE ~ "Below Target"
    )
  )

target_plot <- plot_ly(target_data) %>%
  add_bars(
    x = ~reorder(username, avg_daily), y = ~avg_daily,
    name = "Actual Daily Average",
    marker = list(color = ~performance_pct, 
                  colorscale = list(c(0, "#FF6B6B"), c(0.8, "#FFD700"), c(1, "#2E8B57")),
                  showscale = TRUE,
                  colorbar = list(title = "Performance %")),
    hovertemplate = "<b>%{x}</b><br>Daily Avg: %{y:.1f}<br>Performance: %{marker.color:.1f}%<extra></extra>"
  ) %>%
  add_trace(
    x = ~username, 
    y = rep(5, length(target_data$username)),
    type = "scatter", 
    mode = "lines", 
    line = list(color = "red", dash = "dash", width = 2), 
    name = "Target: 5 surveys/day",
    hovertemplate = "Target: 5 surveys/day<extra></extra>"
  ) %>%
  layout(
    title = "🎯 Daily Performance vs Target",
    xaxis = list(title = "Enumerator", tickangle = -45),
    yaxis = list(title = "Average Daily Surveys"),
    margin = list(b = 100)
  )

target_plot
```

#### ⚠️ Quality Alerts

```{r quality_alerts}
# Quality issues identification
quality_issues <- df_completed %>%
  filter(is_short_survey | is_night_survey | duration_minutes > 120) %>%
  mutate(
    issue_type = case_when(
      is_short_survey ~ "⚡ Too Short",
      is_night_survey ~ "🌙 Night Survey", 
      duration_minutes > 120 ~ "⏰ Too Long",
      TRUE ~ "Other"
    )
  ) %>%
  select(username, farmer_name, started_time, duration_minutes, issue_type) %>%
  arrange(desc(started_time))

quality_issues %>%
  DT::datatable(
    options = list(
      pageLength = 15,
      scrollX = TRUE,
      dom = 'Bfrtip',
      buttons = c('copy', 'csv', 'excel'),
      columnDefs = list(
        list(className = 'dt-center', targets = c(2, 3, 4))
      )
    ),
    class = "table table-striped table-hover",
    caption = "⚠️ Surveys requiring attention"
  ) %>%
  DT::formatRound(columns = "duration_minutes", digits = 1) %>%
  DT::formatStyle(
    "issue_type",
    backgroundColor = DT::styleEqual(
      c("⚡ Too Short", "🌙 Night Survey", "⏰ Too Long"),
      c("#FFE6E6", "#E6E6FF", "#FFF4E6")
    )
  )
```

# 🌱 Survival Analysis

## Row {height="40%"}

### Column {width="50%"}

```{r survival_rates}
# Enhanced survival rates analysis with interactive features
survival_rates <- df_completed %>%
  mutate(across(c(starts_with("ps_num_planted_"), starts_with("num_surv_")),
                as.numeric)) %>%
  # Calculate survival rates for each species
  mutate(
    gesho = (num_surv_gesho / ps_num_planted_gesho) * 100,
    dec = (num_surv_dec / ps_num_planted_dec) * 100,
    grev = (num_surv_grev / ps_num_planted_grev) * 100,
    moringa = (num_surv_moringa / ps_num_planted_moringa) * 100,
    coffee = (num_surv_coffee / ps_num_planted_coffee) * 100,
    papaya = (num_surv_papaya / ps_num_planted_papaya) * 100,
    wanza = (num_surv_wanza / ps_num_planted_wanza) * 100
  ) %>%
  select(gesho, dec, grev, moringa, coffee, papaya, wanza) %>%
  # Handle cases where planted = 0 (avoid division by zero)
  mutate(across(everything(), ~ ifelse(is.nan(.) | is.infinite(.), 0, .))) %>%
  # Get mean survival rate for each species
  summarize(across(everything(), mean, na.rm = TRUE)) %>%
  pivot_longer(everything(), names_to = "species", values_to = "survival_rate") %>%
  arrange(desc(survival_rate))

# Create enhanced interactive bar chart
survival_plot <- plot_ly(survival_rates) %>%
  add_bars(
    x = ~reorder(species, survival_rate), 
    y = ~survival_rate,
    text = ~paste0(round(survival_rate, 1), "%"), 
    textposition = "auto",
    marker = list(
      color = ~survival_rate,
      colorscale = list(c(0, "#FF6B6B"), c(0.5, "#FFD700"), c(1, "#2E8B57")),
      showscale = TRUE,
      colorbar = list(title = "Survival %", x = 1.02)
    ),
    hovertemplate = "<b>%{x}</b><br>Survival Rate: %{y:.1f}%<br>Click for details<extra></extra>"
  ) %>%
  layout(
    title = list(text = "🌱 Survival Rates by Species", font = list(size = 16)),
    xaxis = list(title = "Species", tickangle = -45),
    yaxis = list(title = "Survival Rate (%)", range = c(0, 100)),
    margin = list(b = 100),
    plot_bgcolor = "rgba(0,0,0,0)",
    paper_bgcolor = "rgba(0,0,0,0)"
  )

survival_plot
```

### Column {width="50%"}

```{r species_summary_enhanced}
# Enhanced species summary with more details
species_summary_detailed <- df_completed %>%
  mutate(across(c(starts_with("ps_num_planted_"), starts_with("num_surv_")),
                as.numeric)) %>%
  summarise(
    across(starts_with("ps_num_planted_"), sum, na.rm = TRUE, .names = "total_planted_{.col}"),
    across(starts_with("num_surv_"), sum, na.rm = TRUE, .names = "total_survived_{.col}")
  ) %>%
  pivot_longer(everything()) %>%
  mutate(
    metric = ifelse(str_detect(name, "planted"), "planted", "survived"),
    species = str_remove(name, "total_(planted|survived)_ps_num_planted_|total_(planted|survived)_num_surv_")
  ) %>%
  select(-name) %>%
  pivot_wider(names_from = metric, values_from = value) %>%
  mutate(
    survival_rate = round((survived / planted) * 100, 1),
    status = case_when(
      survival_rate >= 80 ~ "🟢 Excellent",
      survival_rate >= 60 ~ "🟡 Good",
      survival_rate >= 40 ~ "🟠 Fair",
      TRUE ~ "🔴 Poor"
    )
  ) %>%
  arrange(desc(survival_rate)) %>%
  select(Species = species, Planted = planted, Survived = survived, 
         `Survival Rate (%)` = survival_rate, Status = status)

# Create interactive table
species_summary_detailed %>%
  DT::datatable(
    options = list(
      pageLength = 10,
      scrollX = TRUE,
      dom = 'Bfrtip',
      buttons = c('copy', 'csv', 'excel'),
      columnDefs = list(
        list(className = 'dt-center', targets = c(1, 2, 3, 4))
      )
    ),
    class = "table table-striped table-hover",
    caption = "🌱 Detailed Species Performance Analysis"
  ) %>%
  DT::formatStyle(
    "Survival Rate (%)",
    backgroundColor = DT::styleInterval(
      cuts = c(40, 60, 80),
      values = c("#FFE6E6", "#FFF4E6", "#FFFACD", "#E6F7E6")
    )
  ) %>%
  DT::formatStyle(
    "Status",
    backgroundColor = DT::styleEqual(
      c("🟢 Excellent", "🟡 Good", "🟠 Fair", "🔴 Poor"),
      c("#E6F7E6", "#FFFACD", "#FFF4E6", "#FFE6E6")
    )
  )
```

## Row {height="60%"}

### Column {.tabset width="70%"}

#### 🗺️ Geographic Distribution

```{r geographic_analysis_enhanced}
# Enhanced geographic analysis with more interactivity
geo_data <- df_completed %>%
  # First convert all relevant columns to numeric
  mutate(across(c(starts_with("ps_num_planted_"), starts_with("num_surv_")), 
                ~ as.numeric(as.character(.)))) %>%
  group_by(site, woreda) %>%
  summarise(
    surveys = n(),
    # Calculate averages safely
    avg_survival = mean(c_across(starts_with("num_surv_")), na.rm = TRUE),
    # Calculate totals safely
    total_planted = sum(c_across(starts_with("ps_num_planted_")), na.rm = TRUE),
    total_survived = sum(c_across(starts_with("num_surv_")), na.rm = TRUE),
    .groups = "drop"
  ) %>%
  filter(!is.na(site), !is.na(woreda)) %>%
  mutate(
    # Handle NaN and infinite values
    avg_survival = ifelse(is.nan(avg_survival) | is.infinite(avg_survival), 0, avg_survival),
    avg_survival = ifelse(is.na(avg_survival), 0, avg_survival),
    total_planted = ifelse(is.na(total_planted), 0, total_planted),
    total_survived = ifelse(is.na(total_survived), 0, total_survived),
    # Calculate survival rate safely
    survival_rate = ifelse(total_planted > 0, 
                          round((total_survived / total_planted) * 100, 1), 
                          0)
  )

# Check if we have valid data for plotting
if(nrow(geo_data) > 0 && any(!is.na(geo_data$avg_survival))) {
  # Create enhanced geographic distribution chart
  geo_plot <- plot_ly(geo_data) %>%
    add_markers(
      x = ~site, y = ~woreda, 
      size = ~surveys,
      color = ~survival_rate,
      colors = c("#FF6B6B", "#FFD700", "#2E8B57"),
      sizes = c(20, 200),
      hovertemplate = paste0(
        "<b>%{x} - %{y}</b><br>",
        "Surveys: %{marker.size}<br>",
        "Trees Planted: ", geo_data$total_planted, "<br>",
        "Trees Survived: ", geo_data$total_survived, "<br>",
        "Survival Rate: %{marker.color:.1f}%<extra></extra>"
      )
    ) %>%
    layout(
      title = list(text = "🗺️ Geographic Distribution & Performance", font = list(size = 16)),
      xaxis = list(title = "Site", tickangle = -45),
      yaxis = list(title = "Woreda"),
      margin = list(b = 120, l = 100),
      plot_bgcolor = "rgba(0,0,0,0)",
      paper_bgcolor = "rgba(0,0,0,0)"
    )
} else {
  # Fallback plot when no valid data
  geo_plot <- plot_ly() %>%
    add_text(
      x = 0.5, y = 0.5,
      text = "No geographic data available",
      textfont = list(size = 16, color = "gray"),
      showlegend = FALSE
    ) %>%
    layout(
      title = "🗺️ Geographic Distribution & Performance",
      xaxis = list(title = "Site", showticklabels = FALSE),
      yaxis = list(title = "Woreda", showticklabels = FALSE),
      margin = list(b = 100, l = 100)
    )
}

geo_plot
```

#### 📈 Planting vs Survival Analysis

```{r planting_survival_enhanced}
# Enhanced scatter plot with regression line and species breakdown
species_cols <- df_completed %>%
  select(starts_with("ps_num_planted_"), starts_with("num_surv_")) %>%
  names()

# Check if we have any species data
if(length(species_cols) > 0) {
  # Extract species names
  planted_cols <- species_cols[str_detect(species_cols, "ps_num_planted_")]
  survived_cols <- species_cols[str_detect(species_cols, "num_surv_")]
  
  # Get species names
  species_names <- str_remove(planted_cols, "ps_num_planted_")
  
  # Create data for each species
  species_list <- list()
  
  for(species in species_names) {
    planted_col <- paste0("ps_num_planted_", species)
    survived_col <- paste0("num_surv_", species)
    
    if(planted_col %in% names(df_completed) && survived_col %in% names(df_completed)) {
      temp_data <- df_completed %>%
        select(all_of(c(planted_col, survived_col, "site", "woreda"))) %>%
        mutate(
          planted = case_when(
            is.list(.data[[planted_col]]) ~ as.numeric(sapply(.data[[planted_col]], function(x) if(length(x) > 0) x[1] else NA)),
            TRUE ~ as.numeric(.data[[planted_col]])
          ),
          survived = case_when(
            is.list(.data[[survived_col]]) ~ as.numeric(sapply(.data[[survived_col]], function(x) if(length(x) > 0) x[1] else NA)),
            TRUE ~ as.numeric(.data[[survived_col]])
          ),
          species = species,
          survival_rate = round((survived / planted) * 100, 1)
        ) %>%
        select(planted, survived, species, site, woreda, survival_rate) %>%
        filter(!is.na(planted), !is.na(survived), planted > 0)
      
      if(nrow(temp_data) > 0) {
        species_list[[species]] <- temp_data
      }
    }
  }
  
  # Combine all species data
  if(length(species_list) > 0) {
    species_data <- bind_rows(species_list)
    
    scatter_plot <- plot_ly(species_data) %>%
      add_markers(
        x = ~planted, y = ~survived, color = ~species,
        size = ~survival_rate, sizes = c(10, 100),
        hovertemplate = paste0(
          "<b>%{color}</b><br>",
          "Location: ", species_data$site, " - ", species_data$woreda, "<br>",
          "Planted: %{x}<br>",
          "Survived: %{y}<br>",
          "Survival Rate: ", species_data$survival_rate, "%<extra></extra>"
        )
      ) %>%
      add_lines(
        x = c(0, max(species_data$planted, na.rm = TRUE)), 
        y = c(0, max(species_data$planted, na.rm = TRUE)),
        line = list(dash = "dash", color = "gray", width = 2),
        name = "Perfect Survival (100%)",
        showlegend = TRUE
      ) %>%
      layout(
        title = list(text = "🌱 Planted vs Survived Trees by Species", font = list(size = 16)),
        xaxis = list(title = "Trees Planted"),
        yaxis = list(title = "Trees Survived"),
        plot_bgcolor = "rgba(0,0,0,0)",
        paper_bgcolor = "rgba(0,0,0,0)"
      )
  } else {
    # Fallback when no valid species data
    scatter_plot <- plot_ly() %>%
      add_text(
        x = 0.5, y = 0.5,
        text = "No valid planting/survival data available",
        textfont = list(size = 16, color = "gray"),
        showlegend = FALSE
      ) %>%
      layout(
        title = "🌱 Planted vs Survived Trees",
        xaxis = list(title = "Trees Planted", showticklabels = FALSE),
        yaxis = list(title = "Trees Survived", showticklabels = FALSE)
      )
  }
} else {
  # Fallback when no species columns found
  scatter_plot <- plot_ly() %>%
    add_text(
      x = 0.5, y = 0.5,
      text = "No species data columns found",
      textfont = list(size = 16, color = "gray"),
      showlegend = FALSE
    ) %>%
    layout(
      title = "🌱 Planted vs Survived Trees",
      xaxis = list(title = "Trees Planted", showticklabels = FALSE),
      yaxis = list(title = "Trees Survived", showticklabels = FALSE)
    )
}

scatter_plot
```

### Column {width="30%"}

```{r agricultural_kpis}
# Agricultural KPIs in a compact format
if(exists("species_summary_detailed") && nrow(species_summary_detailed) > 0) {
  total_planted <- sum(species_summary_detailed$Planted, na.rm = TRUE)
  total_survived <- sum(species_summary_detailed$Survived, na.rm = TRUE)
  overall_survival <- round((total_survived / total_planted) * 100, 1)
  best_species <- species_summary_detailed$Species[1]
  worst_species <- species_summary_detailed$Species[nrow(species_summary_detailed)]
  
  # Create KPI cards using HTML
  kpi_html <- paste0(
    '<div style="padding: 20px;">',
    '<h4 style="color: #2E8B57; margin-bottom: 20px;">🌱 Agricultural KPIs</h4>',
    
    '<div style="background: linear-gradient(135deg, #4ECDC4 0%, #2E8B57 100%); color: white; padding: 15px; border-radius: 10px; margin-bottom: 15px; text-align: center;">',
    '<div style="font-size: 2rem; font-weight: bold;">', format(total_planted, big.mark = ","), '</div>',
    '<div style="font-size: 0.9rem; opacity: 0.9;">Total Trees Planted</div>',
    '</div>',
    
    '<div style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 15px; border-radius: 10px; margin-bottom: 15px; text-align: center;">',
    '<div style="font-size: 2rem; font-weight: bold;">', format(total_survived, big.mark = ","), '</div>',
    '<div style="font-size: 0.9rem; opacity: 0.9;">Total Trees Survived</div>',
    '</div>',
    
    '<div style="background: linear-gradient(135deg, #FFD700 0%, #FF6B6B 100%); color: white; padding: 15px; border-radius: 10px; margin-bottom: 15px; text-align: center;">',
    '<div style="font-size: 2rem; font-weight: bold;">', overall_survival, '%</div>',
    '<div style="font-size: 0.9rem; opacity: 0.9;">Overall Survival Rate</div>',
    '</div>',
    
    '<div style="background: #E6F7E6; color: #2E8B57; padding: 15px; border-radius: 10px; margin-bottom: 15px; text-align: center;">',
    '<div style="font-size: 1.2rem; font-weight: bold;">🏆 ', str_to_title(best_species), '</div>',
    '<div style="font-size: 0.9rem;">Best Performing Species</div>',
    '</div>',
    
    '<div style="background: #FFE6E6; color: #FF6B6B; padding: 15px; border-radius: 10px; margin-bottom: 15px; text-align: center;">',
    '<div style="font-size: 1.2rem; font-weight: bold;">⚠️ ', str_to_title(worst_species), '</div>',
    '<div style="font-size: 0.9rem;">Needs Attention</div>',
    '</div>',
    
    '</div>'
  )
  
  HTML(kpi_html)
} else {
  HTML('<div style="padding: 20px; text-align: center; color: gray;">No agricultural data available</div>')
}
```

# 📋 Data Explorer

## Row

### Column {width="100%"}

```{r data_explorer}
# Interactive data explorer with filtering
df_explorer <- df_completed %>%
  select(
    Date = date,
    Enumerator = username,
    `Farmer Name` = farmer_name,
    Site = site,
    Woreda = woreda,
    `Duration (min)` = duration_minutes,
    `HH Size` = hh_size,
    `Education Level` = education_level,
    `Marital Status` = marital_status,
    Age = age,
    Sex = sex
  ) %>%
  mutate(
    `Duration (min)` = round(`Duration (min)`, 1),
    Age = as.numeric(Age),
    `HH Size` = as.numeric(`HH Size`)
  )

# Create shared data for crosstalk
shared_data <- SharedData$new(df_explorer)

# Create filters
filter_date <- filter_slider("date", "Date Range", shared_data, ~Date)
filter_enum <- filter_select("enum", "Enumerator", shared_data, ~Enumerator)
filter_site <- filter_select("site", "Site", shared_data, ~Site)

# Create the main table
main_table <- shared_data %>%
  DT::datatable(
    options = list(
      pageLength = 20,
      scrollX = TRUE,
      scrollY = "400px",
      dom = 'Bfrtip',
      buttons = list(
        'copy',
        list(extend = 'csv', filename = 'survey_data'),
        list(extend = 'excel', filename = 'survey_data'),
        'print'
      ),
      columnDefs = list(
        list(className = 'dt-center', targets = c(0, 5, 6, 7, 9, 10))
      )
    ),
    class = "table table-striped table-hover compact",
    caption = "📊 Interactive Survey Data Explorer - Use filters above to explore the data"
  ) %>%
  DT::formatRound(columns = "Duration (min)", digits = 1) %>%
  DT::formatStyle(
    "Duration (min)",
    backgroundColor = DT::styleInterval(
      cuts = c(5, 30, 60),
      values = c("#FFE6E6", "#FFFFFF", "#FFFFFF", "#FFF4E6")
    )
  )

# Layout with filters and table
div(
  style = "margin: 20px;",
  h3("🔍 Interactive Data Explorer", style = "color: #2E8B57; margin-bottom: 20px;"),
  div(
    style = "background: #f8f9fa; padding: 15px; border-radius: 10px; margin-bottom: 20px;",
    div(style = "display: flex; gap: 20px; flex-wrap: wrap;",
        div(style = "flex: 1; min-width: 200px;", filter_date),
        div(style = "flex: 1; min-width: 200px;", filter_enum),
        div(style = "flex: 1; min-width: 200px;", filter_site)
    )
  ),
  main_table
)
```

# 📈 Advanced Analytics

## Row

### Column {.tabset width="50%"}

#### 🔄 Survey Completion Funnel

```{r completion_funnel}
# Survey completion funnel analysis
funnel_data <- data.frame(
  Stage = c("Survey Initiated", "Consent Given", "Survey Completed", "Quality Passed"),
  Count = c(
    nrow(df),
    sum(df$consent == 1, na.rm = TRUE),
    nrow(df_completed),
    nrow(df_completed %>% filter(!is_short_survey, !is_night_survey))
  )
) %>%
  mutate(
    Percentage = round((Count / Count[1]) * 100, 1),
    Drop_Rate = c(0, round((lag(Count) - Count) / lag(Count) * 100, 1)[-1])
  )

funnel_plot <- plot_ly(funnel_data) %>%
  add_bars(
    x = ~Count, y = ~reorder(Stage, Count),
    orientation = "h",
    text = ~paste0(Count, " (", Percentage, "%)"),
    textposition = "auto",
    marker = list(
      color = c("#FF6B6B", "#FFD700", "#2E8B57", "#20B2AA"),
      line = list(color = "white", width = 2)
    ),
    hovertemplate = "<b>%{y}</b><br>Count: %{x}<br>Percentage: %{customdata}%<extra></extra>",
    customdata = ~Percentage
  ) %>%
  layout(
    title = "🔄 Survey Completion Funnel",
    xaxis = list(title = "Number of Surveys"),
    yaxis = list(title = ""),
    margin = list(l = 150)
  )

funnel_plot
```

#### 📊 Duration Distribution

```{r duration_distribution}
# Duration distribution analysis
mean_duration <- mean(df_completed$duration_minutes, na.rm = TRUE)
median_duration <- median(df_completed$duration_minutes, na.rm = TRUE)

duration_plot <- plot_ly(df_completed, x = ~duration_minutes, type = "histogram",
                         nbinsx = 30, name = "Survey Duration") %>%
  add_trace(
    x = c(mean_duration, mean_duration),
    y = c(0, max(hist(df_completed$duration_minutes, breaks = 30, plot = FALSE)$counts)),
    type = "scatter",
    mode = "lines",
    line = list(color = "red", dash = "dash", width = 2),
    name = "Mean",
    hovertemplate = paste0("Mean: ", round(mean_duration, 1), " min<extra></extra>")
  ) %>%
  add_trace(
    x = c(median_duration, median_duration),
    y = c(0, max(hist(df_completed$duration_minutes, breaks = 30, plot = FALSE)$counts)),
    type = "scatter",
    mode = "lines",
    line = list(color = "blue", dash = "dash", width = 2),
    name = "Median",
    hovertemplate = paste0("Median: ", round(median_duration, 1), " min<extra></extra>")
  ) %>%
  layout(
    title = "📊 Survey Duration Distribution",
    xaxis = list(title = "Duration (minutes)"),
    yaxis = list(title = "Frequency"),
    bargap = 0.1
  )

duration_plot
```

### Column {.tabset width="50%"}

#### 📅 Weekly Trends

```{r weekly_trends}
# Weekly trend analysis
weekly_data <- df_completed %>%
  group_by(week = floor_date(date, "week")) %>%
  summarise(
    surveys = n(),
    avg_duration = mean(duration_minutes, na.rm = TRUE),
    quality_issues = sum(is_short_survey | is_night_survey, na.rm = TRUE),
    .groups = "drop"
  ) %>%
  arrange(week)

plot_ly(weekly_data) %>%
  add_bars(
    x = ~week, y = ~surveys,
    name = "Weekly Surveys",
    yaxis = "y",
    marker = list(color = "#2E8B57", opacity = 0.7)
  ) %>%
  add_lines(
    x = ~week, y = ~avg_duration,
    name = "Avg Duration",
    yaxis = "y2",
    line = list(color = "#FF6B6B", width = 3)
  ) %>%
  layout(
    title = "📅 Weekly Performance Trends",
    xaxis = list(title = "Week"),
    yaxis = list(title = "Number of Surveys", side = "left"),
    yaxis2 = list(title = "Average Duration (min)", side = "right", overlaying = "y"),
    legend = list(x = 0.7, y = 0.9)
  )

```

#### 🎯 Performance Metrics

```{r performance_metrics}
# Key performance metrics
metrics_data <- data.frame(
  Metric = c(
    "📊 Total Surveys",
    "✅ Completion Rate", 
    "⏱️ Avg Duration",
    "🎯 Daily Target Achievement",
    "⚠️ Quality Issues",
    "👥 Active Enumerators",
    "📅 Survey Days",
    "🌱 Avg Survival Rate"
  ),
  Value = c(
    paste(survey_stats$completed_surveys),
    paste0(round((survey_stats$completed_surveys/survey_stats$total_surveys)*100, 1), "%"),
    paste0(survey_stats$avg_duration, " min"),
    paste0(round((survey_stats$completed_surveys/(20*5*30))*100, 1), "%"),
    paste(sum(df_completed$is_short_survey | df_completed$is_night_survey, na.rm = TRUE)),
    paste(survey_stats$unique_enumerators),
    paste(n_distinct(df_completed$date)),
    paste0(round(mean(survival_rates$survival_rate, na.rm = TRUE), 1), "%")
  ),
  Status = c("📈", "📈", "⏱️", "🎯", "⚠️", "👥", "📅", "🌱")
)

metrics_data %>%
  gt() %>%
  tab_header(title = "🎯 Key Performance Indicators") %>%
  cols_label(
    Metric = "Metric",
    Value = "Current Value", 
    Status = ""
  ) %>%
  tab_style(
    style = cell_text(weight = "bold", size = "large"),
    locations = cells_body(columns = Value)
  ) %>%
  tab_style(
    style = cell_text(size = "large"),
    locations = cells_body(columns = Status)
  ) %>%
  opt_table_font(font = "Arial") %>%
  tab_options(
    table.border.top.color = "#2E8B57",
    table.border.top.width = px(3),
    column_labels.background.color = "#f8f9fa"
  )
```

---

<div style="text-align: center; margin-top: 30px; padding: 20px; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; border-radius: 10px;">
<h4>🌱 ETH 2025 Survival Survey Dashboard</h4>
<p>Last updated: `r Sys.time()` | Data range: `r survey_stats$date_range`</p>
<p>📊 Monitoring agricultural tree survival and survey quality across Ethiopia</p>
</div>